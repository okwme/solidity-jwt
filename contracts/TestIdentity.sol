pragma solidity ^0.5.0;

import "./Identity.sol";
import "./IERC20.sol";

contract TestIdentity is Identity {
  bytes private constant rsaExponent = hex"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001";
  bytes private constant rsaModulus = hex"b4cac2262947151341ecea7a6e10524e91041424f808cef320e3d3f878630612766d86a18a70bc15b972c44f6bc3cf3d712e1e20079df7feb5e1c407533bf594081dddff9cd1ba27b8ca3f80614920ea793381e5073ef2aa29830f061c4b39d2c2d53388a335a52090afd204f8cfa834777aa1c5d18702a28f30885c83ef0f894f223539bd1f6b373888ba67b40317cbf2400e225d918dc69ef14997db8c9d94b1b55464e21ee4dc3b30599067b97001877f8a78f34ecf0a285a484c564504db56b21f08880131e85ed41f7dc9fec0a4ab075d514dde932c06ca39de3a4be17b2526438523b491d3e800be7f3d89e639ac6278efdb2b3c3501b1995236d1226b";

  constructor(string memory sub, string memory aud)
    Identity(sub, aud, JWKS(0), IERC20(0))
    public payable { }

  function getRsaExponent(string memory) internal pure returns (bytes memory) {
    return rsaExponent;
  }

  function getRsaModulus(string memory) internal view returns (bytes memory) {
    return rsaModulus;
  }
}